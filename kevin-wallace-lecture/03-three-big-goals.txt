What exactly does it mean to secure a network? What targets do we have?

- Confidentiality
You don't want people to access your email, your file server, your printer etc.
If an attacker manages to capture your traffic, they should not be able to read
it.

- Integrity
You have to make sure your data has not been modified.

- Availability
You obviously want your system to work. DoS (Denial of Service) attacks prevent 
your system from working by flooding your system with so much traffic that 
system is not able to do its regular job because it's dealing with that
onslaught of junk data.

Let's focus on confidentiality. One way to have confidentiality is through a
variety of security appliances that you can use on your network, but in 
addition to that, on your Cisco routers for example, you can use ACLs (Access
Control Lists), and also you can encrypt your traffic (and you should). When
somebody says that something is encrypted, it means that the contents of that
something is jumbled up according to some mathematical algorithm, and that algo
will use something called a key, it might be 128 bits in length, might be 256
bits in length, it might be varying bits in length. 

Let's take a look at various security appliances. One of them is a firewall.
A firewall generally stands guard at the perimeter of your network as you go 
out to the internet or you go out to a wide area network, or maybe even to a
different area of your own network. A firewall is basically a set of rules to
say what traffic is permitted to come in, what traffic is permitted to go out.

There are various types of firewalls, one of them might me running on your 
system right now. It's called a host-based, or software-based firewall. It is
available on the majority of modern operating systems. If somebody tries to get
to your computer specifically, you can set up some firewall rules to allow or 
deny that kind of activity.

There is also a rudimentary type of firewall called a packet filtering 
firewall. We are talking about an ACL really, meaning that some ip address are
allowed to go in, some of them are allowed to go out, some of them are
forbidden to go in and so on. For example, imagine you set up a router at the
edge of your network going out to the internet. We set up an ACL to block
traffic from coming in to us. You send a web page request, but it's blocked on
the side of the firewall, so you don't get two way communication. Sitting at
the boundary of your network is not a good place to this type of firewall.

What you might use instead is a stateful firewall. We remember the state of a
session. You're inside, you try to go outside to the internet somewhere and 
when you go into the stateful firewall, it's gonna make a note of this. It's
gonna register your ip address on the inside of the network, it's gonna see 
that you're going to this other ip address at the other side of the network, 
that you're using this source and this destination port number and it's going
to remember that. Then, when that web server returns that web page, the 
firewall is going to realize that that traffic belongs to your sessions and 
allow it.

In recent years, there is a newer type of firewall, it's called a Next
Generation Firewall (NGFW/Layer 7 Firewall). Here, it can examine more that 
just IP information, it can get into the Layer 7 information. It can understand
how different protocol work together. For example, when setting up a Cisco IP
phone, you might be using a protocol called SIP (session initiation protocol) 
to set up the session, to make the phone call, and then to start streaming your
voice that SIP protocol will let you start streaming your voice and that's 
gonna be done with the RTP protocol (Real-time Transport Protocol). The NGFW
will realize that and allow both the SIP and RTP protocols, since RTP is part 
of the same session. So, with NGFW you can look into protocol specific things 
in your streams to permit or deny traffic based on them.

Let's take a look at DMZs (Demilitarized Zones). You can divide your network
into security zones. Imagine you have a connection that goes out to the 
internet, a firewall port that is pointed out to the internet, you have
another section of your network that contains residents, and another to 
teachers. We want to prevent somebody who is sitting in their dorm room from 
getting into a faculty computer, you want to put that in a different security 
zone, a demitilitarized zone. So, what you can do is set up multiple firewall
ports going to different places, one to the internet, one to the faculty 
members, one to the residents halls inside the university. You can limit some
of your servers to a DMZ that has access to the internet, for example a Web
Server and an e-Mail server, and some of them to have no access to the internet
at all. That will also allow you to separate a local network, that shouldn't
have access to the internet, from the internet-connected part of the network.

Another appliance you might have is an IDS sensor, an Intrusion Detection 
System Sensor. Imagine you have a multilayer switch with an IDS sensor 
connected to it. When a packet coming in from the internet hits that switch, 
the switch is making a copy of it. The original is sent to the destination, and
the copy is sent to the IDS sensor. So the IDS sensor monitors traffic flowing
through that switch and it's monitoring it for malitious patters. There is a
signature database that the IDS sensor has and if it sees there's potentially
malicious traffic coming in, it can alert us to that. Some IDS sensors can
notify firewalls about the attack, tell it about the source of attack etc. But
still, the malicious packet did reach the client. There are attacks called
atomic attacks that can deal damage to a system with just one or two packets.
In that case, the IDS sensor might realize that the system was attacked but it
the attack wasn't prevented. To deal with this case, we might need to use an 
IPS sensor, Intrusion Prevention System sensor. 

IDS sensors reacts to copies of the received traffic, but the Intrusion 
Prevention System sensor sits in-line with the traffic. It compares traffic to
a signature database and can potentially drop it. It can be appliance or host
based.

In summary, Firewalls, IPS, IDS sensors are some of the appliances we might 
use.

An ACL, or an Access Control List, is a list of rules. Each rule is called an
ACE (Access Control Entry) and it gives permissions on whether to permit or
deny traffic. The ACEs can be applied to inbound or outbound traffic. Think 
about the direction the traffic travels. You can also match traffic. For 
example, an ACL could be configured to only allow traffic from a specific IP
address range or a specific port. If traffic matches the defined criteria, it
is allowed to pass through the ACL. Otherwise, the traffic is blocked. ACLs
are processed top-down. The order of the rules matters. If a packet matches a 
rule at the top of the list, the subsequent rules will not be evaluated. This 
means that it's important to order the rules correctly to achieve the desired 
traffic filtering behavior. Let's say we go through the entire list and we 
don't have a match. We didn't have a single entry that matched the packet. 
There is an implicit deny of all coming traffic at the bottom. There are 
subtypes of ACLs, there are numbered ACLs, named ACLs, standard and extended
ACLs. Numbers in the range of 1 through 199 are used for standard ACLs. 
Standard ACLs can only filter traffic based on the source IP address of the
packets being examined, and not on the destination IP address, port numbers,
or other packet attributes, so Standard ACLs are not as granular. Here are
some commands:

	access-list 2 permit host 10.1.1.102

This will add a rule to list#2, it will allow traffic from 10.1.1.102, the host
keyword  indicates that the ACL rule applies to only a single host with the IP
address 10.1.1.102. This is in contrast to using a subnet mask, which would
allow the rule to match any IP address within the specified subnet. For
example, if the command were "access-list 2 permit 10.1.1.0 0.0.0.255", it
would allow traffic from any host within the 10.1.1.0/24 subnet. To add these
rules to an interface, first choose the interface, and then apply the rules:

	interface g0/1
	ip access-group 2 in

Extended ACL example. It allows us to configure, for instance, protocols. Let's
imagine that a pc should be able to connect to a server via TFTP(69). Another
PC should be able to connect to another server via FTP. The commands are:

	access list 101 permit udp host 10.1.1.101 host 192.168.1.2 eq 69
	access list 101 permit tcp host 10.1.1.102 host 192.168.1.3 eq ftp
	interface gig 0/1
	ip access group 101 in

UDP is used for UDP based protocols, TCP for TCP-based protocols. 

##########
ENCRYPTION
##########

Encryption is going to scrambe our data up, such that when somebody intercepts
it they're not going to be able to read it. There are two types of encryption:

	- Symmetric
		> DES - very old, not used
		> 3DES - a lot better than DES
		> AES - best option, best symmetric encryption algo
	- Asymmetric
		> RSA 

Symmetric encryption: data is encrypted with the same key.
Asymmetric: two keys, one public and one private. Data encrypted with public
can only be decrypted with private, and vice versa. 
Asymmetric encryption is a lot slower than symmetric.

Certificate authority: imagine you establish a connection with some website.
How do you know it is actually them and some third party? There is a thing in
between you and the website server called a certificate authority. It encrypts
information about the website you're interacting with, that website's name etc.
with their private key, once you receive it, you decrypt it with the CA's 
public key and realize that it is indeed the website you're interacting with.
Then you send data encrypted with the website's public key to the website, and
then the website decrypts it with its private key.

#########
INTEGRITY
#########

You have to make sure that your data has not been modified or mixed up.
Hashing and encryption are different. If you have a big file encrypted, you're
gonna get a big file back. But if you run a hashing algo, like MD5, it's gonna
generate a 128-bit result. This of that as a fingerprint. If you take the 
fingerprint, send the data to somebody, they run the same algo, and get the 
same fingerprint, that means that the data was not modified in transit. It 
doesn't matter how big the size of the encrypted data is, the algo will always
result in a 128-bit string. Better than MD5 is SHA-1 (Secure Hash Algorithm). 
But what is somebody intercepts the string? To overcome that limitation HMAC is
used. HMAC stand for hash-based message authentication code. That adds a secret
key to this. Whoever intercepts it will not be able to generate a believable 
hash digest (?). You will be able to detect that when receiving the string.

############
AVAILABILITY
############

You want your systems to be available at ALL times. The golden standard for 
availability is five nines (99.999%), it means that your service is up 99.999%
of the time. If you translate that to a year, it's about 5 minutes. It's really
hard to achieve and is very expensive.

Sample Threats:
- Improperly formatted data
- DoS
- DDoS

Prevention:
- OS Patches
- IDS, IPS, and Firewall Appliances

By giving overlapping layers of protection, you're completely protected. You
want to have overlapping layers of network security.
